import { KonturOrganizationData } from "../services/playwrightScrapeService";

export interface NotificationOptions {
  showTimestamp?: boolean;
  showRiskInfo?: boolean;
  showIllegalActivity?: boolean;
  customMessage?: string;
}

export class NotificationFormatter {
  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  static formatOrganizationCheck(
    inn: string,
    data: KonturOrganizationData,
    zskResult?: {
      success: boolean;
      result: string;
    },
    options: NotificationOptions = {}
  ): string {
    const { customMessage } = options;

    let message = `–ó–∞–ø—Ä–æ—Å: /${inn}\n`;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (data.name) {
      message += `üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${data.name}\n`;
    }

    if (data.region) {
      message += `üìç <b>–†–µ–≥–∏–æ–Ω:</b> ${data.region}\n`;
    }

    // –î–∞—Ç—ã
    if (data.registrationDate) {
      message += `üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${data.registrationDate}\n`;
    }
    if (data.liquidationDate) {
      message += `‚ö†Ô∏è <b>–î–∞—Ç–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> ${data.liquidationDate}\n`;
    }
    if (data.unreliableDate) {
      message += `‚ùå <b>–î–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π:</b> ${data.unreliableDate}\n`;
    }

    // –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (data.activities && data.activities.length > 0) {
      message += `üîß <b>–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> ${data.activities.join(
        ", "
      )}\n`;
    }

    // –í–µ–±-—Å–∞–π—Ç—ã
    if (data.websites && data.websites.length > 0) {
      message += `üåê <b>–í–µ–±-—Å–∞–π—Ç—ã:</b> ${data.websites.join(", ")}\n`;
    }

    message += `\n\nüö¶ –ó–°–ö\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°–ö
    if (zskResult && zskResult.success && zskResult.result) {
      const cleanResult = zskResult.result
        .replace("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ò–ù–ù", "")
        .trim();
      message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${cleanResult}\n`;
    } else {
      message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n`;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å
    let statusIcon = "üü¢";
    let statusText = "–ó–ï–õ–Å–ù–û–ô –∑–æ–Ω–µ, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫";
    let riskLevel = "0";

    if (data.status === "red") {
      statusIcon = "üî¥";
      statusText = "–ö–†–ê–°–ù–û–ô –∑–æ–Ω–µ, –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã!";
      riskLevel = "2";
    } else if (data.status === "orange") {
      statusIcon = "üü°";
      statusText = "–ñ–Å–õ–¢–û–ô –∑–æ–Ω–µ, —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã";
      riskLevel = "1";
    }

    message += `\n–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫:\n –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${statusIcon} ${riskLevel} - –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ${statusText}\n`;
    message += `\n==============\n`;

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ –∏ –¥–∞—Ç–∞
    if (data.primaryRisk) {
      message += `\n‚ö†Ô∏è <b>–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫:</b> ${data.primaryRisk}\n`;
    }
    if (data.primaryRiskDate) {
      message += `üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${data.primaryRiskDate}\n`;
    }

    // –ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è
    if (data.unreliableInfo) {
      message += `\n‚ùå <b>–ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:</b> ${data.unreliableInfo}\n`;
      if (data.unreliableDate) {
        message += `üìÖ <b>–î–∞—Ç–∞:</b> ${data.unreliableDate}\n`;
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (data.additionalInfo) {
      message += `\nüìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n${data.additionalInfo}\n`;
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (data.comment) {
      message += `\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}\n`;
    }

    // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (customMessage) {
      message += `\n${customMessage}\n`;
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  static formatStatusChange(
    inn: string,
    oldStatus: string,
    newData: KonturOrganizationData,
    newZsk?: {
      rezult: string;
      success: boolean;
    },
    options: NotificationOptions = {}
  ): string {
    if (newZsk) {
    }

    const statusEmojis = {
      red: "üî¥",
      orange: "üü°",
      green: "üü¢",
    };

    const statusNames = {
      red: "–ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫",
      orange: "–ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫",
      green: "–ó–µ–ª–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫",
    };

    const oldEmoji =
      statusEmojis[oldStatus as keyof typeof statusEmojis] || "‚ö™";
    const newEmoji =
      statusEmojis[newData.status as keyof typeof statusEmojis] || "‚ö™";
    const oldName =
      statusNames[oldStatus as keyof typeof statusNames] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const newName =
      statusNames[newData.status as keyof typeof statusNames] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    const header = `üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n`;
    const statusChange = `${oldEmoji} ${oldName} ‚Üí ${newEmoji} ${newName}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è
    let eventInfo = "";
    if (newData.liquidationDate && newData.isLiquidated) {
      eventInfo = `üìÖ <b>–î–∞—Ç–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</b> ${newData.liquidationDate}\n\n`;
    } else if (newData.unreliableDate) {
      eventInfo = `üìÖ <b>–î–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π:</b> ${newData.unreliableDate}\n\n`;
    }

    return (
      header +
      statusChange +
      eventInfo +
      this.formatOrganizationCheck(inn, newData, undefined, {
        ...options,
        showTimestamp: true,
      })
    );
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ó–°–ö
   */
  static formatZskCheck(
    inn: string,
    status: string,
    resultText: string,
    options: NotificationOptions = {}
  ): string {
    const statusIcon = status === "red" ? "üî¥" : "üü¢";
    const statusText =
      status === "red" ? "–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è" : "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";

    let message = `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ó–°–ö</b>\n\n`;
    message += `${statusIcon} <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}\n`;
    message += `üî¢ <b>–ò–ù–ù:</b> ${inn}\n\n`;
    message += `üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n${resultText}\n\n`;

    if (options.showTimestamp !== false) {
      message += `‚ûï <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleDateString(
        "ru-RU"
      )}`;
    }

    return message;
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  static formatQuickCheck(inn: string, data: KonturOrganizationData): string {
    const statusEmojis = {
      red: "üî¥",
      orange: "üü°",
      green: "üü¢",
    };

    const emoji = statusEmojis[data.status] || "‚ö™";

    let message = `${emoji} <b>${data.name || `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${inn}`}</b>\n`;
    message += `üî¢ –ò–ù–ù: ${inn}\n`;
    message += `üìç ${data.region || data.address || "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}\n`;

    if (data.isLiquidated) {
      message += `‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞\n`;
    }

    if (data.hasIllegalActivity) {
      message += `üö® –ù–∞—Ä—É—à–µ–Ω–∏—è –¶–ë –†–§\n`;
    }

    return message;
  }
}
