import { MyConversation } from '../types';
import { validateInnList, validateTelegramIdList, validateInn } from '../utils/validation';
import { database } from '../database';
import { monitoringService } from '../services/monitoringService';
import { getNotificationService } from '../services/notificationService';
import { MESSAGES, config } from '../utils/config';
import logger from '../utils/logger';
import { Context } from "grammy";

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ù–ù —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function checkConversation(
  conversation: MyConversation,
  ctx: Context
) {
  let inn: string;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù —Å –ø–æ–º–æ—â—å—é do while
  do {
    await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    const { message } = await conversation.waitFor("message:text");
    inn = message.text?.trim() || '';
    
    if (!inn) {
      await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    if (!validateInn(inn)) {
      await ctx.reply(MESSAGES.invalidInn + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    break;
  } while (true);
  
  await ctx.reply('üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å...');
  
  try {
    const result = await monitoringService.checkOrganization(inn);
    
    if (result) {
      const statusMessage = config.STATUS_MESSAGE[result.status];
      
      let message = `üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù ${inn}</b>\n\n`;
      message += `üè¢ <b>–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> ${result.name}\n`;
      
      if (result.address) {
        message += `üìç <b>–ê–¥—Ä–µ—Å:</b> ${result.address}\n`;
      }
      
      if (result.registrationDate) {
        message += `üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${result.registrationDate}\n`;
      }
      
      if (result.isLiquidated && result.liquidationDate) {
        message += `‚ö†Ô∏è <b>–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è:</b> ${result.liquidationDate}\n`;
      }
      
      if (result.illegalitySigns && result.illegalitySigns.length > 0) {
        message += `üö® <b>–°–∞–Ω–∫—Ü–∏–∏:</b> ${result.illegalitySigns.join(', ')}\n`;
      }
      
      if (result.activities && result.activities.length > 0) {
        message += `üè¢ <b>–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${result.activities[0]}\n`;
      }
      
      if (result.hasIllegalActivity !== undefined) {
        message += `üö® <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> ${result.hasIllegalActivity ? '–î–∞' : '–ù–µ—Ç'}\n`;
      }
      
      message += `üö¶ –ó–°–ö:\n${statusMessage}\n`;
      
      await ctx.reply(message, { parse_mode: 'HTML' });
    } else {
      await ctx.reply(`‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  } catch (error) {
    logger.error('Error in checkConversation:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_inn
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ù–ù —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function addInnConversation(
  conversation: MyConversation,
  ctx: Context,
) {
  let inns: string;
  let validInns: string[] = [];
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù —Å –ø–æ–º–æ—â—å—é do while
  do {
    await ctx.reply('‚ûï –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏(–π) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    inns = message.text || '';
    
    if (!inns) {
      await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateInnList(inns);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validInns = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –î–æ–±–∞–≤–ª—è—é ${validInns.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é(–π)...`);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  const addedOrganizations = [];
  for (const inn of validInns) {
    try {
      const addedOrg = await database.addOrganizationIfNotExists({
        inn,
        name: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${inn}`,
        status: 'green'
      });
      
      if (!addedOrg) {
        logger.info(`Organization with INN ${inn} already exists, skipping addition`);
        addedOrganizations.push(inn);
        continue;
      }
      
      const orgData = await monitoringService.checkOrganization(inn);
      if (orgData) {
        logger.info(`–ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${inn}: ${orgData.name}`);
      }
      
      addedOrganizations.push(inn);
    } catch (error) {
      logger.error(`Error adding organization ${inn}:`, error);
    }
  }
  
  if (addedOrganizations.length > 0) {
    await ctx.reply(MESSAGES.innAdded(addedOrganizations));
    
    const session = await conversation.external((ctx) => ctx.session);
    if (session.isAdmin) {
      await getNotificationService().sendNewOrganizationsNotification(
        addedOrganizations.map(inn => ({ inn, name: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${inn}` }))
      );
    }
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_inn
 */
export async function removeInnConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }
  
  let inns: string;
  let validInns: string[] = [];
  
  do {
    await ctx.reply('üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏(–π) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    inns = message.text?.trim() || '';
    
    if (!inns) {
      await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateInnList(inns);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validInns = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –£–¥–∞–ª—è—é ${validInns.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é(–π)...`);
  
  const removedOrganizations = [];
  for (const inn of validInns) {
    try {
      const org = await database.getOrganizationByInn(inn);
      if (org) {
        await database.deleteOrganization(inn);
        removedOrganizations.push({ inn, name: org.name });
      }
    } catch (error) {
      logger.error(`Error removing organization ${inn}:`, error);
    }
  }
  
  if (removedOrganizations.length > 0) {
    await ctx.reply(MESSAGES.innRemoved(removedOrganizations.map(org => org.inn)));
    await getNotificationService().sendRemovedOrganizationsNotification(removedOrganizations);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_users
 */
export async function addUsersConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }
  
  let telegramIdsStr: string;
  let validIds: number[] = [];
  
  do {
    await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    telegramIdsStr = message.text?.trim() || '';
    
    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validIds = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –î–æ–±–∞–≤–ª—è—é ${validIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)...`);
  
  const addedUsers = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (existingUser) {
        logger.info(`User with telegram_id ${telegramId} already exists`);
        continue;
      }
      
      await database.createUser(telegramId, undefined, false);
      addedUsers.push(telegramId.toString());
      logger.info(`Added user with telegram_id: ${telegramId}`);
    } catch (error) {
      logger.error(`Error adding user ${telegramId}:`, error);
    }
  }
  
  if (addedUsers.length > 0) {
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${addedUsers.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_users
 */
export async function removeUsersConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }
  
  let telegramIdsStr: string;
  let validIds: number[] = [];
  
  do {
    await ctx.reply('üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    telegramIdsStr = message.text?.trim() || '';
    
    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validIds = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –£–¥–∞–ª—è—é ${validIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)...`);
  
  const removedUsers = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (!existingUser) {
        logger.info(`User with telegram_id ${telegramId} does not exist`);
        continue;
      }
      
      await database.deleteUser(telegramId);
      removedUsers.push(telegramId.toString());
      logger.info(`Removed user with telegram_id: ${telegramId}`);
    } catch (error) {
      logger.error(`Error removing user ${telegramId}:`, error);
    }
  }
  
  if (removedUsers.length > 0) {
    await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: ${removedUsers.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_admins
 */
export async function addAdminsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }
  
  let telegramIdsStr: string;
  let validIds: number[] = [];
  
  do {
    await ctx.reply('üëë –í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    telegramIdsStr = message.text || '';
    
    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validIds = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –ù–∞–∑–Ω–∞—á–∞—é ${validIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–æ–≤)...`);
  
  const addedAdmins = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (!existingUser) {
        await database.createUser(telegramId, undefined, true);
        logger.info(`Created new admin user with telegram_id: ${telegramId}`);
      } else {
        await database.updateUserAdminStatus(telegramId, true);
        logger.info(`Updated user ${telegramId} to admin`);
      }
      addedAdmins.push(telegramId.toString());
    } catch (error) {
      logger.error(`Error making ${telegramId} admin:`, error);
    }
  }
  
  if (addedAdmins.length > 0) {
    await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: ${addedAdmins.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_admins
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç telegram_id —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function removeAdminsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }
  
  let telegramIdsStr: string;
  let validIds: number[] = [];
  
  do {
    await ctx.reply('‚ûñ –í–≤–µ–¥–∏—Ç–µ telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):');
    const { message } = await conversation.waitFor("message:text");
    telegramIdsStr = message.text || '';
    
    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
      continue;
    }
    
    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      continue;
    }
    
    validIds = valid;
    break;
  } while (true);
  
  await ctx.reply(`üîÑ –°–Ω–∏–º–∞—é –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É ${validIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)...`);
  
  const removedAdmins = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (!existingUser) {
        logger.info(`User with telegram_id ${telegramId} does not exist`);
        continue;
      }
      
      if (!existingUser.is_admin) {
        logger.info(`User with telegram_id ${telegramId} is not an admin`);
        continue;
      }
      
      await database.updateUserAdminStatus(telegramId, false);
      removedAdmins.push(telegramId.toString());
      logger.info(`Removed admin rights from user ${telegramId}`);
    } catch (error) {
      logger.error(`Error removing admin rights from ${telegramId}:`, error);
    }
  }
  
  if (removedAdmins.length > 0) {
    await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —É: ${removedAdmins.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
}
