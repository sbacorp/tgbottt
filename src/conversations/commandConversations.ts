import { MyConversation } from '../types';
import { validateTelegramIdList, validateInn, ValidationError } from '../utils/validation';
import { database } from '../database';
import { monitoringService } from '../services/monitoringService';
import { MESSAGES } from '../utils/config';
import logger from '../utils/logger';
import { Context } from "grammy";
import { PlatformZskService } from '../services/platform_zsk';
import { createCancelKeyboard, createMainMenuKeyboard, createCheckResultKeyboard } from '../helpers/keyboard';
import { cbrService } from '../services/cbrService';

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ù–ù —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function checkConversation(
  conversation: MyConversation,
  ctx: Context
) {
  let inn: string;
  const startMessage = await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
    reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  });
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù —Å –ø–æ–º–æ—â—å—é do while
  do {

    const context = await conversation.wait()

    if (context.callbackQuery?.data === 'menu') {
      await ctx.deleteMessage();
      await ctx.deleteMessages([startMessage.message_id]);
      await ctx.reply('–î–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /check  –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ". –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.', {
        reply_markup: createMainMenuKeyboard()
      });
      await context.answerCallbackQuery();
      return;
    }
    // @ts-expect-error
    inn = context.message.text?.trim() || '';

    if (!inn) {
      await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      });
      continue;
    } 
    
    const error: ValidationError = { code: 0, message: '' };
    if (!validateInn(inn, error)) {
      await ctx.reply(`‚ùå ${error.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
        reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      });
      continue;
    }

    break;
  } while (true);

  const msg = await ctx.reply('üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å
    const konturResult = await monitoringService.checkOrganization(inn);
    
    if (!konturResult) {
      await ctx.reply(`‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, {
        reply_markup: createCheckResultKeyboard()
      });
      return;
    }


    await ctx.api.editMessageText(
      msg.chat.id,
      msg.message_id,
      'üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–ø–∏—Å–∫–∞—Ö –¶–ë–†...'
    );
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∏—Å–∫–∞—Ö –¶–ë–† (–æ—Ç–∫–∞–∑—ã –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550)
    const cbrResult = await cbrService.searchOrganization(inn);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°–ö
    await ctx.api.editMessageText(
      msg.chat.id,
      msg.message_id,
      'üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–∏—Å—Ç–µ–º–µ –ó–°–ö...'
    );
    let zskResult: any = null;
    try {
      const platformZskService = new PlatformZskService();
      await platformZskService.init();
      zskResult = await platformZskService.checkInn(inn);
      await platformZskService.close();
    } catch (error) {
      logger.error('Error checking ZSK:', error);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    let message = `–ó–∞–ø—Ä–æ—Å: /${inn}\n`;
    message += `–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${konturResult.name}\n`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (konturResult.isLiquidated) {
      message += `–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n`;
    } else {
      message += `–î–µ–π—Å—Ç–≤—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n`;
    }

    message += `\nüö¶ –ó–°–ö\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°–ö
    if (zskResult && zskResult.success && zskResult.result) {
      const cleanResult = zskResult.result.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ò–ù–ù', '').trim();
      message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${cleanResult}\n`;
    } else {
      message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n`;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å
    let statusIcon = 'üü¢';
    let statusText = '–ó–ï–õ–Å–ù–û–ô –∑–æ–Ω–µ, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫';
    let riskLevel = '0';
    
    if (konturResult.status === 'red') {
      statusIcon = 'üî¥';
      statusText = '–ö–†–ê–°–ù–û–ô –∑–æ–Ω–µ, –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã!';
      riskLevel = '2';
    } else if (konturResult.status === 'orange') {
      statusIcon = 'üü°';
      statusText = '–ñ–Å–õ–¢–û–ô –∑–æ–Ω–µ, —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã';
      riskLevel = '1';
    }
    
    message += `\n–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${statusIcon} ${riskLevel} - –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ${statusText}\n`;
    message += `\n==============\n`;

    message += `\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n`;
    message += `üôÖüèº –û—Ç–∫–∞–∑—ã –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550\n\n`;
    
    if (cbrResult) {
      message += `–ü–æ –¥–∞–Ω–Ω–æ–º—É –ò–ù–ù –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–∫–∞–∑–∞—Ö –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550.\n`;
    } else {
      message += `–ü–æ –¥–∞–Ω–Ω–æ–º—É –ò–ù–ù –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ç–∫–∞–∑–∞—Ö –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n`;
    }

    message += `„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    if (konturResult.additionalInfo) {
      message += `üìä ${konturResult.additionalInfo}\n\n`;
    }

    message += `\nüßæ –°–≤–µ–¥–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã:\n\n`;
    if (konturResult.unreliableInfo) {
      message += `${konturResult.unreliableInfo}${konturResult.unreliableDate ? ` (–¥–∞—Ç–∞: ${konturResult.unreliableDate})` : ''}\n`;
    } else {
      message += `–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n`;
    }

    await ctx.reply(message, { 
      reply_markup: createCheckResultKeyboard()
    });

  } catch (error) {
    logger.error('Error in checkConversation:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_admins
 */
export async function addAdminsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }

  let telegramIdsStr: string;
  let validIds: number[] = [];
  await ctx.reply('üëë –í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):', {
    reply_markup: createCancelKeyboard()
  });

  do {
    const context = await conversation.wait()
    if (context.callbackQuery?.data === 'cancel_conversation') {
      await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return;
    }
    telegramIdsStr = context.message?.text || '';

    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);

    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    validIds = valid;
    break;
  } while (true);

  await ctx.reply(`üîÑ –ù–∞–∑–Ω–∞—á–∞—é ${validIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–æ–≤)...`);

  const addedAdmins = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (!existingUser) {
        await database.createUser(telegramId, undefined, true);
        logger.info(`Created new admin user with telegram_id: ${telegramId}`);
      } else {
        await database.updateUserAdminStatus(telegramId, true);
        logger.info(`Updated user ${telegramId} to admin`);
      }
      addedAdmins.push(telegramId.toString());
    } catch (error) {
      logger.error(`Error making ${telegramId} admin:`, error);
    }
  }

  if (addedAdmins.length > 0) {
    await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: ${addedAdmins.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_admins
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç telegram_id —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function removeAdminsConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const session = await conversation.external((ctx) => ctx.session);
  if (!session.isAdmin) {
    await ctx.reply(MESSAGES.adminOnly);
    return;
  }

  let telegramIdsStr: string;
  let validIds: number[] = [];

  do {
    await ctx.reply('‚ûñ –í–≤–µ–¥–∏—Ç–µ telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):', {
      reply_markup: createCancelKeyboard()
    });
    const { message } = await conversation.waitFor("message:text");
    telegramIdsStr = message.text || '';

    if (!telegramIdsStr) {
      await ctx.reply('‚ùå telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    const { valid, invalid } = validateTelegramIdList(telegramIdsStr);

    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    if (valid.length === 0) {
      await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    validIds = valid;
    break;
  } while (true);

  await ctx.reply(`üîÑ –°–Ω–∏–º–∞—é –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É ${validIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)...`);

  const removedAdmins = [];
  for (const telegramId of validIds) {
    try {
      const existingUser = await database.getUserByTelegramId(telegramId);
      if (!existingUser) {
        logger.info(`User with telegram_id ${telegramId} does not exist`);
        continue;
      }

      if (!existingUser.is_admin) {
        logger.info(`User with telegram_id ${telegramId} is not an admin`);
        continue;
      }

      await database.updateUserAdminStatus(telegramId, false);
      removedAdmins.push(telegramId.toString());
      logger.info(`Removed admin rights from user ${telegramId}`);
    } catch (error) {
      logger.error(`Error removing admin rights from ${telegramId}:`, error);
    }
  }

  if (removedAdmins.length > 0) {
    await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —É: ${removedAdmins.join(', ')}`);
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
}

/**
 * Conversation –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check_cbr
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ù–ù —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¶–ë–† —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function checkCbrConversation(
  conversation: MyConversation,
  ctx: Context
) {
  let inn: string;
  const startMessage = await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¶–ë–†:', {
    reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù —Å –ø–æ–º–æ—â—å—é do while
  do {
    const context = await conversation.wait()
    if (context.callbackQuery?.data === 'menu') {
      await ctx.deleteMessage();
      await ctx.deleteMessages([startMessage.message_id]);
      await ctx.reply('–î–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /check  –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ". –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.', {
        reply_markup: createMainMenuKeyboard()
      });
      await context.answerCallbackQuery();
      return;
    }
    inn = context.message?.text || '';

    if (!inn) {
      await ctx.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      });
      continue;
    }

    const error: ValidationError = { code: 0, message: '' };
    if (!validateInn(inn, error)) {
      await ctx.reply(`‚ùå ${error.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, {
        reply_markup: createCancelKeyboard("menu", "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      });
      continue;
    }

    break;
  } while (true);

  try {
    logger.info('Creating Platform ZSK service instance...');


    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let result: any = null;
    const maxAttempts = 3;

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        if (attempt > 1) {
          await ctx.reply(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ #${attempt} –∏–∑ ${maxAttempts}...`);
        }
        const platformZskService = new PlatformZskService();
        await platformZskService.init();

        await ctx.reply(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –ò–ù–ù: ${inn}`);
        result = await platformZskService.checkInn(inn);

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –æ—à–∏–±–∫–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (result && !result.error) {
          break;
        }
        await platformZskService.close();
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        if (attempt < maxAttempts) {
          await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ #${attempt}. –ü–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
        }

      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù ${inn}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}:`, error);

        if (attempt < maxAttempts) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ #${attempt}. –ü–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
        } else {
          result = { error: `–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` };
        }
      }
    }

    console.log(result, 'result');
    if (result.success) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–∏–º–µ—é—Ç—Å—è" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      const hasIllegalActivity = result.result.toLowerCase().includes('–∏–º–µ—é—Ç—Å—è');
      const statusIcon = hasIllegalActivity ? 'üî¥' : 'üü¢';
      //—É–¥–∞–ª—è—é –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ò–ù–ù –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const resMessage = result.result.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ò–ù–ù', '');

      await ctx.reply(`${statusIcon} –ü—Ä–æ–≤–µ—Ä–∫–∞ –¶–ë–† –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:\n${resMessage}`, {
        reply_markup: createCheckResultKeyboard()
      });
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¶–ë–†: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`, {
        reply_markup: createCheckResultKeyboard()
      });
    }
  } catch (error) {
    logger.error('Error in Platform ZSK service:', error);
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¶–ë–†: ${errorMessage}`, {
      reply_markup: createCheckResultKeyboard()
    });
  }
}
