import { MyConversation } from '../types';
import { database } from '../database';
import { MESSAGES } from '../utils/config';
import logger from '../utils/logger';
import { Context, InlineKeyboard } from "grammy";
import { createCancelKeyboard } from '../helpers/keyboard';

/**
 * Conversation –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
 */
export async function removeUserFromGroupConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const telegramId = ctx.from?.id;
  
  if (!telegramId) {
    await ctx.reply(MESSAGES.error);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userGroup = await database.getUserGroup(telegramId);
  if (!userGroup || userGroup.owner_id !== telegramId) {
    await ctx.editMessageText('‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
  const members = await database.getGroupMembers(userGroup.id);
  const otherMembers = members.filter(member => member.telegram_id !== telegramId);
  
  if (otherMembers.length === 0) {
    await ctx.editMessageText(
      `üë• <b>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n` +
      `–í –≥—Ä—É–ø–ø–µ "${userGroup.name}" –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –≤–∞—Å.`,
      {
        parse_mode: 'HTML',
        reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking")
      }
    );
    return;
  }

  let userTelegramId: number;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const membersList = otherMembers.map((member, index) => 
    `${index + 1}. ID: ${member.telegram_id}${member.username ? ` (@${member.username})` : ''}`
  ).join('\n');

  await ctx.editMessageText(
    `‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã "${userGroup.name}"</b>\n\n` +
    `<b>–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n${membersList}\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
    {
      parse_mode: 'HTML',
      reply_markup: createCancelKeyboard()
    }
  );

  // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID
  do {
    const context = await conversation.wait();

    if (context.callbackQuery?.data === 'cancel_conversation') {
      await context.editMessageText('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    const userInput = context.message?.text?.trim() || '';

    if (!userInput) {
      await context.reply('‚ùå Telegram ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    const parsedId = parseInt(userInput);
    if (isNaN(parsedId) || parsedId <= 0) {
      await context.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã
    if (parsedId === telegramId) {
      await context.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
    const memberExists = otherMembers.some(member => member.telegram_id === parsedId);
    if (!memberExists) {
      await context.reply('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    userTelegramId = parsedId;
    break;
  } while (true);

  await ctx.editMessageText('üîÑ –£–¥–∞–ª—è—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã...');

  try {
    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const member = otherMembers.find(m => m.telegram_id === userTelegramId);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
    await database.removeGroupMember(userGroup.id, userTelegramId);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    const backKeyboard = new InlineKeyboard()
      .text("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "tracking_users")
      .row()
      .text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking");

    await ctx.reply(
      `‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!</b>\n\n` +
      `üë§ <b>Telegram ID:</b> ${userTelegramId}\n` +
      `üë§ <b>Username:</b> ${member?.username ? `@${member.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üë• <b>–ì—Ä—É–ø–ø–∞:</b> ${userGroup.name}\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.`,
      {
        parse_mode: 'HTML',
        reply_markup: backKeyboard
      }
    );

    logger.info(`User ${telegramId} removed user ${userTelegramId} from group ${userGroup.id}`);

  } catch (error) {
    logger.error('Error removing user from group:', error);
    await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
