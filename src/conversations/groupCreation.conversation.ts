import { MyConversation } from '../types';
import { database } from '../database';
import { MESSAGES } from '../utils/config';
import logger from '../utils/logger';
import { Context, InlineKeyboard } from "grammy";
import { createCancelKeyboard } from '../helpers/keyboard';

/**
 * Conversation –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
 */
export async function createGroupConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const telegramId = ctx.from?.id;
  
  if (!telegramId) {
    await ctx.reply(MESSAGES.error);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  const user = await database.getUserByTelegramId(telegramId);
  if (!user) {
    await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    return;
  }

  let groupName: string;
  
  await ctx.editMessageText('üë• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', {
    reply_markup: createCancelKeyboard()
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
  do {
    const context = await conversation.wait();

    if (context.callbackQuery?.data === 'cancel_conversation') {
      await context.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    groupName = context.message?.text?.trim() || '';

    if (!groupName) {
      await context.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    if (groupName.length < 3) {
      await context.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    if (groupName.length > 100) {
      await context.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã)
    if (!/^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s\-_.,!?()]+$/u.test(groupName)) {
      await context.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard()
      });
      continue;
    }

    break;
  } while (true);

  await ctx.editMessageText('üîÑ –°–æ–∑–¥–∞—é –≥—Ä—É–ø–ø—É...');

  try {
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
    const group = await database.createUserGroup(groupName, telegramId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const botUsername = ctx.me.username || 'your_bot';
    const inviteLink = `https://t.me/${botUsername}?start=joinGroup_${group.invite_code}`;

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π
    const groupManagementKeyboard = new InlineKeyboard()
      .text("üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", "tracking_organizations")
      .text("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "tracking_users")
      .row()
      .text("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "get_invite_link")
      .row()
      .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main_menu");

    await ctx.reply(
      `‚úÖ <b>–ì—Ä—É–ø–ø–∞ "${groupName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
      `üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π:</b>\n` +
      `‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n` +
      `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n` +
      `üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b>\n` +
      `<code>${inviteLink}</code>`,
      { 
        parse_mode: 'HTML',
        reply_markup: groupManagementKeyboard
      }
    );

    logger.info(`User ${telegramId} (@${ctx.from?.username}) created group "${groupName}" with invite code ${group.invite_code}`);

  } catch (error) {
    logger.error('Error creating group:', error);
    
    if (error instanceof Error && error.message.includes('duplicate')) {
      await ctx.editMessageText('‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
    } else {
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}
