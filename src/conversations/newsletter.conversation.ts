import { InlineKeyboard, Context } from "grammy";
import type { MyConversation } from "../types";
import { database } from "../database";
import logger from "../utils/logger";

export async function newsletterConversation(conversation: MyConversation, ctx: Context) {
  const session = await conversation.external((ctx) => (ctx as any).session);
  if (!session?.isAdmin) {
    await ctx.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
    return;
  }

  await ctx.reply("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–Ω –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º)");
  const titleMsg = await conversation.wait();
  const title = titleMsg.message?.text?.trim();
  if (!title) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /newsletter");
    return;
  }

  await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)");
  const bodyMsg = await conversation.wait();
  const body = bodyMsg.message?.text?.trim();
  if (!body) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /newsletter");
    return;
  }

  const kbYesNo = new InlineKeyboard()
    .text("–î–∞", "add_photo_yes")
    .text("–ù–µ—Ç", "add_photo_no");
  await ctx.reply("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", { reply_markup: kbYesNo });

  const cb = await conversation.waitFor("callback_query:data");
  let photoFileId: string | null = null;

  if (cb.callbackQuery?.data === "add_photo_yes") {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.");
    const photoOrSkip = await conversation.wait();

    if (photoOrSkip.message?.text === "/skip") {
      // no photo
    } else if (photoOrSkip.message?.photo && photoOrSkip.message.photo.length > 0) {
      const sizes = photoOrSkip.message.photo;
      if (sizes && sizes.length > 0) {
        photoFileId = sizes[sizes.length - 1]!.file_id;
      }
    } else {
      await ctx.reply("‚ùå –§–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–æ—Ç–æ.");
    }
  }

  const composed = `<b>${escapeHtml(title)}</b>\n\n${escapeHtml(body)}`;

  // Preview
  try {
    if (photoFileId) {
      await ctx.api.sendPhoto(ctx.chat!.id, photoFileId, { caption: composed, parse_mode: "HTML" });
    } else {
      await ctx.api.sendMessage(ctx.chat!.id, composed, { parse_mode: "HTML" });
    }
  } catch (e) {
    logger.error("Error sending preview:", e);
  }

  const kbConfirm = new InlineKeyboard()
    .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "confirm_send")
    .text("–û—Ç–º–µ–Ω–∞", "confirm_cancel");
  await ctx.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏", { reply_markup: kbConfirm });

  const confirmCb = await conversation.waitFor("callback_query:data");
  if (confirmCb.callbackQuery?.data !== "confirm_send") {
    await ctx.reply("‚ùé –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    return;
  }

  await ctx.reply("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.");

  // Fetch all users
  let users: { telegram_id: number }[] = [];
  try {
    users = (await database.getAllUsers()).map(u => ({ telegram_id: u.telegram_id }));
  } catch (e) {
    logger.error("Error fetching users for newsletter:", e);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    return;
  }

  let sent = 0;
  let failed = 0;

  for (const u of users) {
    try {
      if (photoFileId) {
        await ctx.api.sendPhoto(u.telegram_id, photoFileId, { caption: composed, parse_mode: "HTML" });
      } else {
        await ctx.api.sendMessage(u.telegram_id, composed, { parse_mode: "HTML" });
      }
      sent += 1;
    } catch (e) {
      failed += 1;
      logger.error(`Error sending newsletter to ${u.telegram_id}:`, e);
    }

    // Basic pacing to avoid hitting flood limits
    await sleep(100);
  }

  await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ: ${sent}\n–û—à–∏–±–æ–∫: ${failed}`);
}

function sleep(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function escapeHtml(str: string): string {
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/\"/g, "&quot;")
    .replace(/'/g, "&#39;");
}
