import { MyConversation } from '../types';
import { database } from '../database';
import { MESSAGES } from '../utils/config';
import logger from '../utils/logger';
import { Context, InlineKeyboard } from "grammy";
import { createCancelKeyboard } from '../helpers/keyboard';
import { createTrackingMenuKeyboard } from '../features/tracking';
import { validateInn, ValidationError } from '../utils/validation';
import { monitoringService } from '../services/monitoringService';

/**
 * Conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
 */
export async function addInnToGroupConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const telegramId = ctx.from?.id;
  
  if (!telegramId) {
    await ctx.reply(MESSAGES.error);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userGroup = await database.getUserGroup(telegramId);
  if (!userGroup) {
    await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–∞—á–∞–ª–∞.');
    return;
  }

  let inn: string;
  
  await ctx.editMessageText(
    `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}"</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:`,
    {
      parse_mode: 'HTML',
      reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
    }
  );

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
  do {
    const context = await conversation.wait();

    if (context.callbackQuery?.data === 'back_to_tracking') {
      const keyboard = createTrackingMenuKeyboard();
      await context.editMessageText(
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –í—ã.",
        { reply_markup: keyboard }
      );
      await context.answerCallbackQuery();
      return;
    }

    inn = context.message?.text?.trim() || '';

    if (!inn) {
      await context.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
      });
      continue;
    }

    const error: ValidationError = { code: 0, message: '' };
    if (!validateInn(inn, error)) {
      await context.reply(`‚ùå ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
        reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
      });
      continue;
    }

    break;
  } while (true);

  await ctx.editMessageText('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∏ –¥–æ–±–∞–≤–ª—è—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    let organization = await database.getOrganizationByInn(inn);
    
    if (!organization) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const orgData = await monitoringService.checkOrganization(inn);
      
      const addedOrg = await database.addOrganizationIfNotExists({
        inn,
        name: orgData?.name || `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${inn}`,
        status: orgData?.status || 'green',
        address: orgData?.address || '',
        region: orgData?.region || ''


      });

      if (addedOrg) {
        organization = addedOrg;
        logger.info(`Added new organization ${inn} to database`);
      } else {
        organization = await database.getOrganizationByInn(inn);
      }
    }

    if (!organization) {
      await ctx.editMessageText(`‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù.`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
    await database.addGroupOrganization(userGroup.id, inn, telegramId);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    const backKeyboard = new InlineKeyboard()
      .text("üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", "tracking_organizations")
      .row()
      .text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking");

    await ctx.reply(
      `‚úÖ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n` +
      `üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${organization.name}\n` +
      `üÜî <b>–ò–ù–ù:</b> ${inn}\n` +
      `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusColorMap[organization.status]}\n\n` +
      `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.`,
      {
        parse_mode: 'HTML',
        reply_markup: backKeyboard
      }
    );

    logger.info(`User ${telegramId} added organization ${inn} to group ${userGroup.id}`);

  } catch (error) {
    logger.error('Error adding organization to group:', error);
    
    if (error instanceof Error && error.message.includes('duplicate')) {
      await ctx.editMessageText(
        `‚ÑπÔ∏è <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n` +
        `–ò–ù–ù ${inn} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}".`,
        {
          parse_mode: 'HTML',
          reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking")
        }
      );
    } else {
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}


export const statusColorMap = {
  'red': '–ö—Ä–∞—Å–Ω—ã–π',
  'orange': '–ñ–µ–ª—Ç—ã–π',
  'green': '–ó–µ–ª–µ–Ω—ã–π'
}