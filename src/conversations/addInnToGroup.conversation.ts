import { MyConversation } from '../types';
import { database } from '../database';
import { MESSAGES } from '../utils/config';
import logger from '../utils/logger';
import { Context, InlineKeyboard } from "grammy";
import { createCancelKeyboard } from '../helpers/keyboard';
import { createTrackingMenuKeyboard } from '../features/tracking';
import { validateInn, ValidationError } from '../utils/validation';
import { monitoringService } from '../services/monitoringService';
import { PlatformZskService } from '../services/platform_zsk';
import { NotificationFormatter } from '../helpers/notificationFormatter';

/**
 * Conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
 */
export async function addInnToGroupConversation(
  conversation: MyConversation,
  ctx: Context
) {
  const telegramId = ctx.from?.id;
  
  if (!telegramId) {
    await ctx.reply(MESSAGES.error);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userGroup = await database.getUserGroup(telegramId);
  if (!userGroup) {
    await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–∞—á–∞–ª–∞.');
    return;
  }

  let inn: string;
  
  await ctx.editMessageText(
    `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}"</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:`,
    {
      parse_mode: 'HTML',
      reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
    }
  );

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
  do {
    const context = await conversation.wait();

    if (context.callbackQuery?.data === 'back_to_tracking') {
      const keyboard = createTrackingMenuKeyboard();
      await context.editMessageText(
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –í—ã.",
        { reply_markup: keyboard }
      );
      await context.answerCallbackQuery();
      return;
    }

    inn = context.message?.text?.trim() || '';

    if (!inn) {
      await context.reply('‚ùå –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', {
        reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
      });
      continue;
    }

    const error: ValidationError = { code: 0, message: '' };
    if (!validateInn(inn, error)) {
      await context.reply(`‚ùå ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`, {
        reply_markup: createCancelKeyboard("back_to_tracking", "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
      });
      continue;
    }

    break;
  } while (true);

  await ctx.editMessageText('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∏ –¥–æ–±–∞–≤–ª—è—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...');

  try {
    // 1. –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –ö–æ–Ω—Ç—É—Ä–∞
    const konturResult = await monitoringService.checkOrganization(inn);
    
    if (!konturResult) {
      await ctx.editMessageText(`‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù.`);
      return;
    }
    
    // 2. –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ó–°–ö
    await ctx.editMessageText('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–∏—Å—Ç–µ–º–µ –ó–°–ö...');
    let zskResult: { success: boolean; result: string } | null = null;
    try {
      const platformZskService = new PlatformZskService();
      await platformZskService.init();
      zskResult = await platformZskService.checkInn(inn);
      await platformZskService.close();
    } catch (error) {
      logger.error("Error checking ZSK in addInnToGroup:", error);
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const zskStatus = zskResult?.success ? (zskResult.result.toLowerCase().includes('–∏–º–µ—é—Ç—Å—è') ? 'red' : 'green') : 'green';
    await database.addOrganization({
      inn,
      name: konturResult.name || `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${inn}`,
      status: konturResult.status || 'green',
      region: konturResult.region || '',
      riskInfo: konturResult.riskInfo || '',
      zskStatus: zskStatus,
      organizationStatus: konturResult.organizationStatus,
      hasRejectionsByLists: konturResult.hasRejectionsByLists,
      unreliableAddress: !!konturResult.unreliableData?.address,
      unreliableDirector: !!konturResult.unreliableData?.director,
      unreliableFounders: !!konturResult.unreliableData?.founders,
      ...(konturResult.unreliableData?.updateDate && { unreliableDataUpdateDate: konturResult.unreliableData.updateDate })
    });

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
    await database.addGroupOrganization(userGroup.id, inn, telegramId);

    // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const backKeyboard = new InlineKeyboard()
      .text("üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", "tracking_organizations")
      .row()
      .text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking");
      
    const message = NotificationFormatter.formatOrganizationCheck(
      inn,
      konturResult,
      zskResult || undefined,
      {
        customMessage: `<b>‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.</b>`
      }
    );

    await ctx.reply(
      message,
      {
        parse_mode: 'HTML',
        reply_markup: backKeyboard
      }
    );

    logger.info(`User ${telegramId} added organization ${inn} to group ${userGroup.id}`);

  } catch (error) {
    logger.error('Error adding organization to group:', error);
    
    if (error instanceof Error && error.message.includes('duplicate')) {
      await ctx.editMessageText(
        `<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n` +
        `–ò–ù–ù ${inn} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}".`,
        {
          parse_mode: 'HTML',
          reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "back_to_tracking")
        }
      );
    } else {
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}


export const statusColorMap = {
  'red': '–ö—Ä–∞—Å–Ω—ã–π',
  'orange': '–ñ–µ–ª—Ç—ã–π',
  'green': '–ó–µ–ª–µ–Ω—ã–π'
}