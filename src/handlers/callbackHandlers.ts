import { MyContext } from '../types';
import { database } from '../database';
import { MESSAGES, STATUS_EMOJIS } from '../utils/config';
import logger from '../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function handleCallback(ctx: MyContext): Promise<void> {
  try {
    const callbackData = ctx.callbackQuery?.data;
    if (!callbackData) {
      await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    switch (callbackData) {
      case 'menu':
        await handleMenuCallback(ctx);
        break;
      case 'add_inn':
        await handleAddInnCallback(ctx);
        break;
      case 'users_list':
        await handleUsersListCallback(ctx);
        break;
      case 'manage_users':
        await handleManageUsersCallback(ctx);
        break;
      case 'manage_admins':
        await handleManageAdminsCallback(ctx);
        break;
      case 'organizations_list':
        await handleOrganizationsListCallback(ctx);
        break;
      case 'add_users':
        await handleAddUsersCallback(ctx);
        break;
      case 'remove_users':
        await handleRemoveUsersCallback(ctx);
        break;
      case 'add_admins':
        await handleAddAdminsCallback(ctx);
        break;
      case 'remove_admins':
        await handleRemoveAdminsCallback(ctx);
        break;
      case 'cancel_conversation':
        await handleCancelConversationCallback(ctx);
        break;
      default:
        await ctx.answerCallbackQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  } catch (error) {
    logger.error('Error in handleCallback:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é
 */
async function handleMenuCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', callback_data: 'organizations_list' },
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù', callback_data: 'add_inn' }
        ]
      ]
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (ctx.session.isAdmin) {
      keyboard.inline_keyboard.push([
        { text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' },
        { text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏', callback_data: 'manage_users' }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'manage_admins' }
      ]);
    }

    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleMenuCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleAddInnCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_inn");
  } catch (error) {
    logger.error('Error in handleAddInnCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleUsersListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    const users = await database.getAllUsers();
    
    if (users.length === 0) {
      await ctx.editMessageText(MESSAGES.noUsers);
      await ctx.answerCallbackQuery();
      return;
    }

    let message = 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π):\n\n';
    
    for (const user of users) {
      const adminBadge = user.is_admin ? ' üëë' : '';
      const username = user.username ? `@${user.username}` : `ID: ${user.telegram_id}`;
      
      message += `${username}${adminBadge}\n`;
    }

    await ctx.editMessageText(message);
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleUsersListCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
async function handleManageUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'add_users' },
          { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'remove_users' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }
        ]
      ]
    };

    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleManageUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 */
async function handleManageAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data: 'add_admins' },
          { text: '‚ûñ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞', callback_data: 'remove_admins' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }
        ]
      ]
    };

    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleManageAdminsCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 */
async function handleOrganizationsListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    const organizations = await database.getAllOrganizations();
    
    if (organizations.length === 0) {
      await ctx.editMessageText('üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_inn', 
        { parse_mode: 'HTML' });
      await ctx.answerCallbackQuery();
      return;
    }

    let message = 'üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n';
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const redOrgs = organizations.filter(org => org.status === 'red');
    const orangeOrgs = organizations.filter(org => org.status === 'orange');
    const greenOrgs = organizations.filter(org => org.status === 'green');

    if (redOrgs.length > 0) {
      message += `üî¥ <b>–ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (${redOrgs.length}):</b>\n`;
      redOrgs.forEach(org => {
        message += `${STATUS_EMOJIS.red} ${org.name} (${org.inn})\n`;
      });
      message += '\n';
    }

    if (orangeOrgs.length > 0) {
      message += `üü° <b>–ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫ (${orangeOrgs.length}):</b>\n`;
      orangeOrgs.forEach(org => {
        message += `${STATUS_EMOJIS.orange} ${org.name} (${org.inn})\n`;
      });
      message += '\n';
    }

    if (greenOrgs.length > 0) {
      message += `üü¢ <b>–ó–µ–ª—ë–Ω—ã–π —Å–ø–∏—Å–æ–∫ (${greenOrgs.length}):</b>\n`;
      greenOrgs.slice(0, 10).forEach(org => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        message += `${STATUS_EMOJIS.green} ${org.name} (${org.inn})\n`;
      });
      if (greenOrgs.length > 10) {
        message += `... –∏ –µ—â—ë ${greenOrgs.length - 10} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n`;
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.length > 4096) {
      message = message.substring(0, 4090) + '...';
    }

    await ctx.editMessageText(message, { parse_mode: 'HTML' });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleOrganizationsListCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleAddUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_users");
  } catch (error) {
    logger.error('Error in handleAddUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleRemoveUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("remove_users");
  } catch (error) {
    logger.error('Error in handleRemoveUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleAddAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_admins");
  } catch (error) {
    logger.error('Error in handleAddAdminsCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleRemoveAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("remove_admins");
  } catch (error) {
    logger.error('Error in handleRemoveAdminsCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã conversation
 */
async function handleCancelConversationCallback(ctx: MyContext): Promise<void> {
  try {
    await ctx.answerCallbackQuery('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    await ctx.conversation.exit('cancel');
  } catch (error) {
    logger.error('Error in handleCancelConversationCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
  }
}