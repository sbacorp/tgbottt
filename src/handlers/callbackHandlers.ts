import { MyContext } from '../types';
import { database } from '../database';
import { MESSAGES, STATUS_EMOJIS, STATUS_NAMES } from '../utils/config';
// import { isBotAdmin } from '../guards/admin';
import logger from '../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function handleCallback(ctx: MyContext): Promise<void> {
  try {
    const callbackData = ctx.callbackQuery?.data;
    if (!callbackData) {
      await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    switch (callbackData) {
      case 'menu':
        await handleMenuCallback(ctx);
        break;
      case 'add_inn':
        await handleAddInnCallback(ctx);
        break;
      case 'users_list':
        await handleUsersListCallback(ctx);
        break;
      case 'manage_users':
        await handleManageUsersCallback(ctx);
        break;
      case 'manage_admins':
        await handleManageAdminsCallback(ctx);
        break;
      case 'organizations_list':
        await handleOrganizationsListCallback(ctx);
        break;
      case 'add_users':
        await handleAddUsersCallback(ctx);
        break;
      case 'remove_users':
        await handleRemoveUsersCallback(ctx);
        break;
      case 'add_admin':
        await handleAddAdminCallback(ctx);
        break;
      case 'remove_admin':
        await handleRemoveAdminCallback(ctx);
        break;
      default:
        await ctx.answerCallbackQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  } catch (error) {
    logger.error('Error in handleCallback:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é
 */
async function handleMenuCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', callback_data: 'organizations_list' },
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù', callback_data: 'add_inn' }
        ]
      ]
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (ctx.session.isAdmin) {
      keyboard.inline_keyboard.push([
        { text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' },
        { text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏', callback_data: 'manage_users' }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'manage_admins' }
      ]);
    }

    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleMenuCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù
 */
async function handleAddInnCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ò–ù–ù
    ctx.session.currentAction = 'add_inn';
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu' }]
      ]
    };

    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ù–ù —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n' +
      '–ü—Ä–∏–º–µ—Ä: 1234567890 1234567891',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleAddInnCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ò–ù–ù');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleUsersListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const users = await database.getAllUsers();
    
    if (users.length === 0) {
      await ctx.editMessageText(MESSAGES.noUsers);
      await ctx.answerCallbackQuery();
      return;
    }

    let message = 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π):\n\n';
    
    for (const user of users) {
      const adminBadge = user.is_admin ? ' –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '';
      const username = user.username ? `@${user.username}` : `ID: ${user.telegram_id}`;
      
      message += `${username}${adminBadge}\n`;
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu' }]
      ]
    };

    await ctx.editMessageText(message, { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleUsersListCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
async function handleManageUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'add_users' },
          { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'remove_users' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu' }]
      ]
    };

    await ctx.editMessageText(
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleManageUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 */
async function handleManageAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'add_admin' },
          { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'remove_admin' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu' }]
      ]
    };

    await ctx.editMessageText(
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleManageAdminsCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 */
async function handleOrganizationsListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    const organizations = await database.getAllOrganizations();
    
    if (organizations.length === 0) {
      await ctx.editMessageText(MESSAGES.noOrganizations);
      await ctx.answerCallbackQuery();
      return;
    }

    let message = 'üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:\n\n';
    
    for (const org of organizations) {
      const emoji = STATUS_EMOJIS[org.status as keyof typeof STATUS_EMOJIS];
      const statusName = STATUS_NAMES[org.status as keyof typeof STATUS_NAMES];
      
      message += `${emoji} <b>${org.inn}</b>\n`;
      message += `   –ù–∞–∑–≤–∞–Ω–∏–µ: ${org.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `   –°—Ç–∞—Ç—É—Å: ${statusName}\n`;
      message += `   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${org.updatedDate ? org.updatedDate.toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'menu' }]
      ]
    };

    await ctx.editMessageText(message, { 
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleOrganizationsListCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleAddUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ username
    ctx.session.currentAction = 'add_users';
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_users' }]
      ]
    };

    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ telegram_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n' +
      '–ü—Ä–∏–º–µ—Ä: 123456789 987654321\n\n' +
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleAddUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleRemoveUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ username
    ctx.session.currentAction = 'remove_users';
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_users' }]
      ]
    };

    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ telegram_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n' +
      '–ü—Ä–∏–º–µ—Ä: 123456789 987654321',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleRemoveUsersCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
async function handleAddAdminCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ username
    ctx.session.currentAction = 'add_admins';
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_admins' }]
      ]
    };

    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ telegram_id –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n' +
      '–ü—Ä–∏–º–µ—Ä: 123456789 987654321\n\n' +
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleAddAdminCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
async function handleRemoveAdminCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ username
    ctx.session.currentAction = 'remove_admins';
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_admins' }]
      ]
    };

    await ctx.editMessageText(
      '–í–≤–µ–¥–∏—Ç–µ telegram_id –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n' +
      '–ü—Ä–∏–º–µ—Ä: 123456789 987654321',
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error in handleRemoveAdminCallback:', error);
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
}
