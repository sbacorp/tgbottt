import { MyContext } from "../types";
import { database } from "../database";
import { MESSAGES, STATUS_EMOJIS } from "../utils/config";
import logger from "../utils/logger";
import {
  createBackKeyboard,
  createCancelKeyboard,
  createMainMenuKeyboard,
} from "../helpers";
import { createTrackingMenuKeyboard } from "../features/tracking";
import { InlineKeyboard } from "grammy";
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function handleCallback(ctx: MyContext): Promise<void> {
  try {
    const callbackData = ctx.callbackQuery?.data;
    if (!callbackData) {
      await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
    switch (callbackData) {
      case "menu":
        await handleMenuCallback(ctx);
        break;
      case "users_list":
        await handleUsersListCallback(ctx);
        break;
      case "manage_users":
        await handleManageUsersCallback(ctx);
        break;
      case "manage_admins":
        await handleManageAdminsCallback(ctx);
        break;
      case "organizations_list":
        await handleOrganizationsListCallback(ctx);
        break;
      case "add_admins":
        await handleAddAdminsCallback(ctx);
        break;
      case "remove_admins":
        await handleRemoveAdminsCallback(ctx);
        break;
      case "tracking_menu":
        await handleTrackingMenuCallback(ctx);
        break;
      case "single_check":
        await handleSingleCheckCallback(ctx);
        break;
      default:
        await ctx.answerCallbackQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
  } catch (error) {
    logger.error("Error in handleCallback:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é
 */
async function handleMenuCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
      return;
    }
    await ctx.editMessageText(
      `–î–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /check

–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ". –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.`,
      {
        reply_markup: createMainMenuKeyboard(),
      }
    );
    await ctx.answerCallbackQuery("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
  } catch (error) {
    logger.error("Error in handleMenuCallback:", error);
  }
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function handleUsersListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    const users = await database.getAllUsers();

    if (users.length === 0) {
      await ctx.editMessageText(MESSAGES.noUsers);
      await ctx.answerCallbackQuery();
      return;
    }

    let message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π):\n\n";

    for (const user of users) {
      const adminBadge = user.is_admin ? " üëë" : "";
      const username = user.username
        ? `@${user.username}`
        : `ID: ${user.telegram_id}`;

      message += `${username}${adminBadge}\n`;
    }

    await ctx.editMessageText(message);
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error in handleUsersListCallback:", error);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
async function handleManageUsersCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "add_users" },
          { text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "remove_users" },
        ],
        [{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "menu" }],
      ],
    };

    await ctx.editMessageText("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏:", {
      reply_markup: keyboard,
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error in handleManageUsersCallback:", error);
    await ctx.answerCallbackQuery(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 */
async function handleManageAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data: "add_admins" },
          { text: "‚ûñ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", callback_data: "remove_admins" },
        ],
        [{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "menu" }],
      ],
    };

    await ctx.editMessageText("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", {
      reply_markup: keyboard,
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error in handleManageAdminsCallback:", error);
    await ctx.answerCallbackQuery(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
 */
async function handleOrganizationsListCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
      return;
    }

    const organizations = await database.getAllOrganizations();

    if (organizations.length === 0) {
      await ctx.editMessageText(
        "üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_inn",
        { parse_mode: "HTML", reply_markup: createCancelKeyboard() }
      );
      await ctx.answerCallbackQuery();
      return;
    }

    let message = "üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n";

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const redOrgs = organizations.filter((org) => org.status === "red");
    const orangeOrgs = organizations.filter((org) => org.status === "orange");
    const greenOrgs = organizations.filter((org) => org.status === "green");

    if (redOrgs.length > 0) {
      message += `üî¥ <b>–ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (${redOrgs.length}):</b>\n`;
      redOrgs.forEach((org) => {
        message += `${STATUS_EMOJIS.red} ${org.name} (${org.inn})\n`;
      });
      message += "\n";
    }

    if (orangeOrgs.length > 0) {
      message += `üü° <b>–ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫ (${orangeOrgs.length}):</b>\n`;
      orangeOrgs.forEach((org) => {
        message += `${STATUS_EMOJIS.orange} ${org.name} (${org.inn})\n`;
      });
      message += "\n";
    }

    if (greenOrgs.length > 0) {
      message += `üü¢ <b>–ó–µ–ª—ë–Ω—ã–π —Å–ø–∏—Å–æ–∫ (${greenOrgs.length}):</b>\n`;
      greenOrgs.slice(0, 10).forEach((org) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        message += `${STATUS_EMOJIS.green} ${org.name} (${org.inn})\n`;
      });
      if (greenOrgs.length > 10) {
        message += `... –∏ –µ—â—ë ${greenOrgs.length - 10} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n`;
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.length > 4096) {
      message = message.substring(0, 4090) + "...";
    }

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: createBackKeyboard("tracking_menu"),
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error in handleOrganizationsListCallback:", error);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
  }
}


/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleAddAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_admins");
  } catch (error) {
    logger.error("Error in handleAddAdminsCallback:", error);
    await ctx.answerCallbackQuery(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ—Ç conversation
 */
async function handleRemoveAdminsCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.answerCallbackQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("remove_admins");
  } catch (error) {
    logger.error("Error in handleRemoveAdminsCallback:", error);
    await ctx.answerCallbackQuery(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
 */
async function handleTrackingMenuCallback(ctx: MyContext): Promise<void> {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.reply(MESSAGES.error);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø–∞
    const userGroup = await database.getUserGroup(telegramId);

    if (!userGroup) {
      await ctx.deleteMessage();
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
      const keyboard = new InlineKeyboard()
        .text("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", "create_group")
        .row()
        .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main_menu");

      await ctx.reply(
        "üè¢ <b>–ì—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.",
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    } else {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
      await ctx.deleteMessage();
      const keyboard = createTrackingMenuKeyboard();
      await ctx.reply(
        `üè¢ <b>–ì—Ä—É–ø–ø–∞ "${userGroup.name}"</b>\n\n–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.`,
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    }
  } catch (error) {
    logger.error("Error in tracking menu:", error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –ò–ù–ù
 */
async function handleSingleCheckCallback(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.answerCallbackQuery("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("check");
  } catch (error) {
    logger.error("Error in handleSingleCheckCallback:", error);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
  }
}
