import { MyContext } from '../types';
import { validateTelegramIdList } from '../utils/validation';
import { database } from '../database';
import { monitoringService } from '../services/monitoringService';

import { MESSAGES, config } from '../utils/config';
import { isBotAdmin } from '../guards/admin';
import logger from '../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 */
export async function handleStart(ctx: MyContext): Promise<void> {
  try {
    const telegramId = ctx.from?.id;
    const username = ctx.from?.username;
    
    if (!telegramId) {
      await ctx.reply(MESSAGES.error);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await database.getUserByTelegramId(telegramId);
    const isAdmin = isBotAdmin(ctx);
    
    if (!user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      if (isAdmin) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
        try {
          await createAdminUser(telegramId, username);
          user = await database.getUserByTelegramId(telegramId);
          await ctx.reply('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
        } catch (error) {
          logger.error('Error auto-registering admin:', error);
          await ctx.reply(MESSAGES.error);
          return;
        }
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await ctx.reply(MESSAGES.notRegistered);
        return;
      }
    } else if (isAdmin && !user.is_admin) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
      try {
        await database.updateUserAdminStatus(telegramId, true);
        user = await database.getUserByTelegramId(telegramId);
        await ctx.reply('‚úÖ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      } catch (error) {
        logger.error('Error updating user to admin:', error);
      }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
    ctx.session.isRegistered = true;
    ctx.session.isAdmin = (user?.is_admin || isAdmin) ?? false;
    ctx.session.language = 'ru';

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ú–µ–Ω—é', callback_data: 'menu' },
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù', callback_data: 'add_inn' }
        ]
      ]
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (ctx.session.isAdmin) {
      keyboard.inline_keyboard.push([
        { text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' },
        { text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏', callback_data: 'manage_users' }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'manage_admins' }
      ]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.reply(MESSAGES.welcome, { reply_markup: keyboard });
    
    logger.info(`User ${telegramId} (@${username}) started the bot (isAdmin: ${ctx.session.isAdmin})`);
  } catch (error) {
    logger.error('Error in handleStart:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
 */
export async function handleMenu(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', callback_data: 'organizations_list' },
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù', callback_data: 'add_inn' }
        ]
      ]
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (ctx.session.isAdmin) {
      keyboard.inline_keyboard.push([
        { text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' },
        { text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏', callback_data: 'manage_users' }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'manage_admins' }
      ]);
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
  } catch (error) {
    logger.error('Error in handleMenu:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /organizations
 */
export async function handleOrganizations(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const organizations = await database.getAllOrganizations();
    const { formatOrganizationList } = await import('../helpers/messages');
    
    const message = formatOrganizationList(organizations);
    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error('Error in handleOrganizations:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_inn
 */
export async function handleAddInn(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ù–ù
    await ctx.conversation.enter("add_inn");
  } catch (error) {
    logger.error('Error in handleAddInn:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_inn
 */
export async function handleRemoveInn(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ò–ù–ù
    await ctx.conversation.enter("remove_inn");
  } catch (error) {
    logger.error('Error in handleRemoveInn:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users
 */
export async function handleUsers(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    const users = await database.getAllUsers();
    
    if (users.length === 0) {
      await ctx.reply(MESSAGES.noUsers);
      return;
    }

    let message = 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π):\n\n';
    
    for (const user of users) {
      const adminBadge = user.is_admin ? ' –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '';
      const username = user.username ? `@${user.username}` : `ID: ${user.telegram_id}`;
      
      message += `${username}${adminBadge}\n`;
    }

    await ctx.reply(message);
  } catch (error) {
    logger.error('Error in handleUsers:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_users
 */
export async function handleAddUsers(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await ctx.conversation.enter("add_users");
  } catch (error) {
    logger.error('Error in handleAddUsers:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_users
 */
export async function handleRemoveUsers(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await ctx.conversation.enter("remove_users");
  } catch (error) {
    logger.error('Error in handleRemoveUsers:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check
 */
export async function handleCheck(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await ctx.conversation.enter("check");
  } catch (error) {
    logger.error('Error in handleCheck:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
 */
export async function handleStatus(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const isRunning = monitoringService.isMonitoringRunning();
    
    let message = 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n';
    message += `üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${isRunning ? '‚úÖ –ó–∞–ø—É—â–µ–Ω' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const organizations = await database.getAllOrganizations();
    const users = await database.getAllUsers();
    
    const redCount = organizations.filter(org => org.status === 'red').length;
    const orangeCount = organizations.filter(org => org.status === 'orange').length;
    const greenCount = organizations.filter(org => org.status === 'green').length;

    message += `\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${organizations.length}\n`;
    message += `üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${redCount}\n`;
    message += `üü° –ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫: ${orangeCount}\n`;
    message += `üü¢ –ó–µ–ª—ë–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${greenCount}\n`;
    message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`;

    await ctx.reply(message);
  } catch (error) {
    logger.error('Error in handleStatus:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
 */
export async function handleHelp(ctx: MyContext): Promise<void> {
  try {
    const helpMessage = `ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n` +
      `<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
      `/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n` +
      `/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `/organizations - –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n` +
      `/add_inn –ò–ù–ù1 –ò–ù–ù2 - –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n` +
      `/check –ò–ù–ù - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é\n` +
      `/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
      `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
      
      `<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
      `/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `/add_users 123456789 987654321 - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ telegram_id\n` +
      `/remove_users 123456789 987654321 - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ telegram_id\n` +
      `/add_admins 123456789 987654321 - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ telegram_id\n` +
      `/remove_admins 123456789 987654321 - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ telegram_id\n` +
      `/remove_inn –ò–ù–ù1 –ò–ù–ù2 - –£–¥–∞–ª–∏—Ç—å –ò–ù–ù –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n` +
      
      `<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n` +
      `/add_inn 1234567890 1234567891\n` +
      `/check 1234567890\n` +
      `/add_users 123456789 987654321\n` +
      `/add_admins 123456789 987654321`;

    await ctx.reply(helpMessage, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error('Error in handleHelp:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_admins
 */
export async function handleAddAdmins(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await ctx.conversation.enter("add_admins");
  } catch (error) {
    logger.error('Error in handleAddAdmins:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_admins
 */
export async function handleRemoveAdmins(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !ctx.session.isAdmin) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    const text = ctx.message?.text;
    if (!text) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ telegram_id –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /remove_admins 123456789 987654321');
      return;
    }

    const telegramIds = text.replace('/remove_admins', '').trim();
    if (!telegramIds) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ telegram_id –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /remove_admins 123456789 987654321');
      return;
    }

    const { valid, invalid } = validateTelegramIdList(telegramIds);
    
    if (invalid.length > 0) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id: ${invalid.join(', ')}`);
      return;
    }

    if (valid.length === 0) {
      await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö telegram_id –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    // –°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const removedAdmins = [];
    for (const telegramId of valid) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await database.getUserByTelegramId(telegramId);
        if (!existingUser) {
          logger.info(`User with telegram_id ${telegramId} does not exist`);
          continue;
        }

        // –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await database.updateUserAdminStatus(telegramId, false);
        removedAdmins.push(telegramId.toString());
        logger.info(`Removed admin rights from user ${telegramId}`);
      } catch (error) {
        logger.error(`Error removing admin rights from ${telegramId}:`, error);
      }
    }

    if (removedAdmins.length > 0) {
      await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —É: ${removedAdmins.join(', ')}`);
    } else {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  } catch (error) {
    logger.error('Error in handleRemoveAdmins:', error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setcommands
 */
export async function handleSetCommands(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered || !isBotAdmin(ctx)) {
      await ctx.reply(MESSAGES.adminOnly);
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await ctx.api.setMyCommands([
      { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
      { command: "menu", description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
      { command: "organizations", description: "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π" },
      { command: "add_inn", description: "–î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" },
      { command: "check", description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é" },
      { command: "status", description: "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" },
      { command: "help", description: "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" },
    ], {
      scope: {
        type: "all_private_chats",
      },
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCommands = [
      { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
      { command: "menu", description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
      { command: "organizations", description: "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π" },
      { command: "add_inn", description: "–î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" },
      { command: "check", description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é" },
      { command: "status", description: "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" },
      { command: "help", description: "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" },
      { command: "users", description: "–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π" },
      { command: "add_users", description: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ telegram_id" },
      { command: "remove_users", description: "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ telegram_id" },
      { command: "add_admins", description: "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ telegram_id" },
      { command: "remove_admins", description: "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ telegram_id" },
      { command: "remove_inn", description: "–£–¥–∞–ª–∏—Ç—å –ò–ù–ù –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" },
      { command: "setcommands", description: "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã" },
    ];

    for (const adminId of config.adminUserIds) {
      await ctx.api.setMyCommands(adminCommands, {
        scope: {
          type: "chat",
          chat_id: adminId,
        },
      });
    }

    await ctx.reply("‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  } catch (error) {
    logger.error('Error in handleSetCommands:', error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥");
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function createAdminUser(telegramId: number, username?: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await database.getUserByTelegramId(telegramId);
    
    if (existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∞–≤–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await database.updateUserAdminStatus(telegramId, true);
      logger.info(`User ${telegramId} (@${username}) promoted to admin`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await database.createUser(telegramId, username, true);
      logger.info(`Created new admin user ${telegramId} (@${username})`);
    }
  } catch (error) {
    logger.error(`Error creating admin user ${telegramId}:`, error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function createRegularUser(telegramId: number, username?: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await database.getUserByTelegramId(telegramId);
    
    if (!existingUser) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await database.createUser(telegramId, username, false);
      logger.info(`Created new regular user ${telegramId} (@${username})`);
    }
  } catch (error) {
    logger.error(`Error creating regular user ${telegramId}:`, error);
    throw error;
  }
}
