import logger from "../utils/logger";
import { MyContext } from "../types";
import { MESSAGES } from "../utils/config";
import { monitoringService } from "../services/monitoringService";
import { PlatformZskService } from "../services/platform_zsk";
import { createCheckResultKeyboard } from "../helpers/keyboard";
import { NotificationFormatter } from "../helpers/notificationFormatter";
import { validateInn } from "../utils/validation";
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * –¢–µ–ø–µ—Ä—å –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ conversations
 */
export async function handleText(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const text = ctx.message?.text;
    if (!text) {
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –≤ conversation)
    await handleDefaultText(ctx, text);
  } catch (error) {
    logger.error("Error in handleText:", error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
 */
async function handleDefaultText(ctx: MyContext, text: string): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ù–ù –≤ —Ç–µ–∫—Å—Ç–µ
  const innRegex = /\b\d{10,12}\b/g;
  const possibleInns = text.match(innRegex);

  if (possibleInns && possibleInns.length > 0) {
    const validInns = possibleInns.filter((inn) => validateInn(inn));

    if (validInns.length > 0) {
      const inn = validInns[0];
      const msg = await ctx.reply(
        "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...\n –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥."
      );
      try {
        // –ö–æ–Ω—Ç—É—Ä
        const konturResult = await monitoringService.checkOrganization(
          inn as string
        );
        if (!konturResult) {
          await ctx.reply(
            `‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
            {
              reply_markup: createCheckResultKeyboard(),
            }
          );
          return;
        }

        await ctx.api.editMessageText(
          msg.chat.id,
          msg.message_id,
          "üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–ø–∏—Å–∫–∞—Ö –¶–ë–†..."
        );

        await ctx.api.editMessageText(
          msg.chat.id,
          msg.message_id,
          "üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–∏—Å—Ç–µ–º–µ –ó–°–ö..."
        );
        let zskResult: any = null;
        try {
          const zsk = new PlatformZskService();
          await zsk.init();
          zskResult = await zsk.checkInn(inn as string);
          await zsk.close();
        } catch (e) {
          logger.error("Error checking ZSK (hears):", e);
        }

        const messageHeader = NotificationFormatter.formatOrganizationCheck(
          inn as string,
          konturResult,
          zskResult,
          {
            showTimestamp: true,
            showRiskInfo: true,
            showIllegalActivity: true,
          }
        );

        await ctx.reply(messageHeader, {
          reply_markup: createCheckResultKeyboard(),
          parse_mode: "HTML",
        });
        return;
      } catch (error) {
        logger.error("Error in inline INN check:", error);
        await ctx.reply(MESSAGES.error);
        return;
      }
    }
  }

  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–ù–ù, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
  await ctx.reply(
    "üí° –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n" +
      "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check\n" +
      "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é: /start\n" +
      "‚ùì –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: /help"
  );
}
