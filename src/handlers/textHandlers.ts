import logger from "../utils/logger";
import { MyContext } from "../types";
import { MESSAGES } from "../utils/config";
import { monitoringService } from "../services/monitoringService";
import { cbrService } from "../services/cbrService";
import { PlatformZskService } from "../services/platform_zsk";
import { createCheckResultKeyboard } from "../helpers/keyboard";
import { validateInn } from "../helpers";
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * –¢–µ–ø–µ—Ä—å –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ conversations
 */
export async function handleText(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const text = ctx.message?.text;
    if (!text) {
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –≤ conversation)
    await handleDefaultText(ctx, text);
  } catch (error) {
    logger.error("Error in handleText:", error);
    await ctx.reply(MESSAGES.error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
 */
async function handleDefaultText(ctx: MyContext, text: string): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ù–ù –≤ —Ç–µ–∫—Å—Ç–µ
  const innRegex = /\b\d{10,12}\b/g;
  const possibleInns = text.match(innRegex);

  if (possibleInns && possibleInns.length > 0) {
    const validInns = possibleInns.filter((inn) => validateInn(inn));

    if (validInns.length > 0) {
      const inn = validInns[0];
      const msg = await ctx.reply('üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...\n –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥.');
      try {
        // –ö–æ–Ω—Ç—É—Ä
        const konturResult = await monitoringService.checkOrganization(inn as string);
        if (!konturResult) {
          await ctx.reply(`‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, {
            reply_markup: createCheckResultKeyboard()
          });
          return;
        }

        await ctx.api.editMessageText(
          msg.chat.id,
          msg.message_id,
          'üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–ø–∏—Å–∫–∞—Ö –¶–ë–†...'
        );
        const cbrResult = await cbrService.searchOrganization(inn as string);

        await ctx.api.editMessageText(
          msg.chat.id,
          msg.message_id,
          'üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤ —Å–∏—Å—Ç–µ–º–µ –ó–°–ö...'
        );
        let zskResult: any = null;
        try {
          const zsk = new PlatformZskService();
          await zsk.init();
          zskResult = await zsk.checkInn(inn as string);
          await zsk.close();
        } catch (e) {
          logger.error('Error checking ZSK (hears):', e);
        }

        let message = `–ó–∞–ø—Ä–æ—Å: /${inn}\n`;
        message += `–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${konturResult.name}\n`;
        if (konturResult.address) message += `–ê–¥—Ä–µ—Å: ${konturResult.address}\n`;

        if (konturResult.isLiquidated) {
          message += `–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n`;
        } else {
          message += `–î–µ–π—Å—Ç–≤—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n`;
        }

        message += `\nüö¶ –ó–°–ö\n`;
        if (zskResult && zskResult.success && zskResult.result) {
          const cleanResult = zskResult.result.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ò–ù–ù', '').trim();
          message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${cleanResult}\n`;
        } else {
          message += `üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n`;
        }

        let statusIcon = 'üü¢';
        let statusText = '–ó–ï–õ–Å–ù–û–ô –∑–æ–Ω–µ, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫';
        let riskLevel = '0';
        if (konturResult.status === 'red') {
          statusIcon = 'üî¥';
          statusText = '–ö–†–ê–°–ù–û–ô –∑–æ–Ω–µ, –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã!';
          riskLevel = '2';
        } else if (konturResult.status === 'orange') {
          statusIcon = 'üü°';
          statusText = '–ñ–Å–õ–¢–û–ô –∑–æ–Ω–µ, —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã';
          riskLevel = '1';
        }
        message += `\n–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${statusIcon} ${riskLevel} - –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ${statusText}\n`;
        message += `\n==============\n`;

        message += `\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n`;
        if (cbrResult) {
          message += `–ü–æ –¥–∞–Ω–Ω–æ–º—É –ò–ù–ù –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–∫–∞–∑–∞—Ö –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550.\n`;
        } else {
          message += `–ü–æ –¥–∞–Ω–Ω–æ–º—É –ò–ù–ù –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ç–∫–∞–∑–∞—Ö –ø–æ —Å–ø–∏—Å–∫–∞–º 764/639/550 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n`;
        }

        if (konturResult.additionalInfo) {
          message += `üìä ${konturResult.additionalInfo}\n\n`;
        }

        message += `\nüßæ –°–≤–µ–¥–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã:\n\n`;
        if ((konturResult as any).unreliableInfo) {
          const ur = (konturResult as any);
          message += `${ur.unreliableInfo}${ur.unreliableDate ? ` (–¥–∞—Ç–∞: ${ur.unreliableDate})` : ''}\n`;
        } else {
          message += `–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n`;
        }

        await ctx.reply(message, { reply_markup: createCheckResultKeyboard() });
        return;
      } catch (error) {
        logger.error('Error in inline INN check:', error);
        await ctx.reply(MESSAGES.error);
        return;
      }
    }
  }

  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–ù–ù, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
  await ctx.reply(
    "üí° –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n" +
      "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check\n" +
      "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é: /start\n" +
      "‚ùì –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: /help"
  );
}
