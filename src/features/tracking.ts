import { Composer, InlineKeyboard } from "grammy";
import { MyContext } from "../types";
import { database } from "../database";
import { MESSAGES } from "../utils/config";
import logger from "../utils/logger";
import { formatOrganizationList } from "../helpers/messages";
import { createMainMenuKeyboard } from "../helpers/keyboard";

// –°–æ–∑–¥–∞–µ–º Composer –¥–ª—è feature tracking
export const tracking = new Composer<MyContext>();

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
export function createTrackingMenuKeyboard(): InlineKeyboard {
  return new InlineKeyboard()
    .text("üìã –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", "tracking_organizations")
    .row()
    .text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "tracking_users")
    .row()
    .text("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", "delete_group")
    .row()
    .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main_menu");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
function createOrganizationsManagementKeyboard(): InlineKeyboard {
  return new InlineKeyboard()
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "add_organization")
    .text("‚ûñ –£–¥–∞–ª–∏—Ç—å", "remove_organization")
    .row()
    .text("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é", "back_to_tracking");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
function createUsersManagementKeyboard(): InlineKeyboard {
  return new InlineKeyboard()
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "add_user")
    .text("‚ûñ –£–¥–∞–ª–∏—Ç—å", "remove_user")
    .row()
    .text("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é", "back_to_tracking");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"
tracking.hears("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", async (ctx) => {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.reply(MESSAGES.error);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø–∞
    const userGroup = await database.getUserGroup(telegramId);

    if (!userGroup) {
      await ctx.deleteMessage();
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
      const keyboard = new InlineKeyboard()
        .text("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", "create_group")
        .row()
        .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main_menu");

      await ctx.reply(
        "üè¢ <b>–ì—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.",
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    } else {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
      await ctx.deleteMessage();
      const keyboard = createTrackingMenuKeyboard();
      await ctx.reply(
        `üè¢ <b>–ì—Ä—É–ø–ø–∞ "${userGroup.name}"</b>\n\n–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.`,
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    }
  } catch (error) {
    logger.error("Error in tracking menu:", error);
    await ctx.reply(MESSAGES.error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ conversation
tracking.callbackQuery("create_group", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("create_group");
  } catch (error) {
    logger.error("Error starting create group conversation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
tracking.callbackQuery("get_invite_link", async (ctx) => {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const userGroup = await database.getUserGroup(telegramId);
    if (!userGroup) {
      await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const botUsername = ctx.me.username || "your_bot";
    const inviteLink = `https://t.me/${botUsername}?start=joinGroup_${userGroup.invite_code}`;

    await ctx.editMessageText(
      `üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É "${userGroup.name}"</b>\n\n` +
        `<code>${inviteLink}</code>\n\n` +
        `üìã <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.</b>`,
      {
        parse_mode: "HTML",
        reply_markup: new InlineKeyboard().text(
          "üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
          "back_to_tracking"
        ),
      }
    );

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error getting invite link:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "tracking_organizations" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
tracking.callbackQuery("tracking_organizations", async (ctx) => {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const userGroup = await database.getUserGroup(telegramId);
    if (!userGroup) {
      await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const organizations = await database.getGroupOrganizations(userGroup.id);

    let message = `üìã <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã "${userGroup.name}":</b>\n\n`;

    if (organizations.length === 0) {
      message +=
        "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.";
    } else {
      message += formatOrganizationList(organizations);
    }

    const keyboard = createOrganizationsManagementKeyboard();

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error showing organizations list:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "tracking_users" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
tracking.callbackQuery("tracking_users", async (ctx) => {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const userGroup = await database.getUserGroup(telegramId);
    if (!userGroup) {
      await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const members = await database.getGroupMembers(userGroup.id);

    let message = `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã "${userGroup.name}":</b>\n\n`;

    if (members.length === 0) {
      message += "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.";
    } else {
      for (const member of members) {
        const isOwner = member.telegram_id === userGroup.owner_id;
        const ownerBadge = isOwner ? " üëë (–í–ª–∞–¥–µ–ª–µ—Ü)" : "";
        const username = member.username
          ? `@${member.username}`
          : `ID: ${member.telegram_id}`;
        message += `${username}${ownerBadge}\n`;
      }
    }

    message += `\nüîó <b>–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> <code>${userGroup.invite_code}</code>\n`;
    message += `–°—Å—ã–ª–∫–∞: https://t.me/${ctx.me.username}?start=joinGroup_${userGroup.invite_code}`;

    const keyboard = createUsersManagementKeyboard();

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error showing members list:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "add_organization" - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ conversation
tracking.callbackQuery("add_organization", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_inn_to_group");
  } catch (error) {
    logger.error("Error starting add organization conversation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "remove_organization" - —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ conversation
tracking.callbackQuery("remove_organization", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("remove_inn_from_group");
  } catch (error) {
    logger.error("Error starting remove organization conversation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "add_user" - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ conversation
tracking.callbackQuery("add_user", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("add_user_to_group");
  } catch (error) {
    logger.error("Error starting add user conversation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "remove_user" - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ conversation
tracking.callbackQuery("remove_user", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter("remove_user_from_group");
  } catch (error) {
    logger.error("Error starting remove user conversation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
tracking.callbackQuery("back_to_tracking", async (ctx) => {
  try {
    const keyboard = createTrackingMenuKeyboard();
    await ctx.editMessageText(
      "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –í—ã.",
      { reply_markup: keyboard }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error going back to tracking:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
  }
});

tracking.callbackQuery("back_to_organizations", async (ctx) => {
  try {
    const organizations = await database.getAllOrganizations();

    let message = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:</b>\n\n";

    if (organizations.length === 0) {
      message +=
        "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.";
    } else {
      message += formatOrganizationList(organizations);
    }

    const keyboard = createOrganizationsManagementKeyboard();

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error going back to organizations:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
  }
});

tracking.callbackQuery("back_to_users", async (ctx) => {
  try {
    const users = await database.getAllUsers();

    let message = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n";

    if (users.length === 0) {
      message +=
        "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –í—ã.";
    } else {
      for (const user of users) {
        const adminBadge = user.is_admin ? " (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)" : "";
        const username = user.username
          ? `@${user.username}`
          : `ID: ${user.telegram_id}`;
        message += `${username}${adminBadge}\n`;
      }
    }

    const keyboard = createUsersManagementKeyboard();

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error going back to users:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
tracking.callbackQuery("back_to_main_menu", async (ctx) => {
  try {
    const keyboard = createMainMenuKeyboard();
    await ctx.editMessageText(
      `–î–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /check

      –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ". –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–µ–Ω—é –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.`,
      {
        reply_markup: keyboard,
      }
    );
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("Error going back to main menu:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
tracking.callbackQuery("delete_group", async (ctx) => {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const userGroup = await database.getUserGroup(telegramId);
    if (!userGroup) {
      await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    await database.deleteUserGroup(userGroup.id, telegramId);
    const keyboard = createMainMenuKeyboard();
    await ctx.editMessageText(MESSAGES.welcome, { reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error('Error deleting group from tracking menu:', error);
    await ctx.answerCallbackQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É');
  }
});
