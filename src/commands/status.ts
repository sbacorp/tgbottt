import { MyContext } from '../types';
import { database } from '../database';
import { monitoringService } from '../services/monitoringService';
import { platformZskService } from '../services/platform_zsk';
import { MESSAGES, config } from '../utils/config';
import logger from '../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
 */
export async function handleStatus(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.session.isRegistered) {
      await ctx.reply(MESSAGES.notRegistered);
      return;
    }

    const isRunning = monitoringService.isMonitoringRunning();
    
    let message = 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n';
    message += `üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${isRunning ? '‚úÖ –ó–∞–ø—É—â–µ–Ω' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const organizations = await database.getAllOrganizations();
    const users = await database.getAllUsers();
    
    const redCount = organizations.filter(org => org.status === 'red').length;
    const orangeCount = organizations.filter(org => org.status === 'orange').length;
    const greenCount = organizations.filter(org => org.status === 'green').length;

    message += `\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${organizations.length}\n`;
    message += `üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${redCount}\n`;
    message += `üü° –ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫: ${orangeCount}\n`;
    message += `üü¢ –ó–µ–ª—ë–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${greenCount}\n`;
    message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    if (config.proxy.enabled && config.proxy.server) {
      message += `\n\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n`;
      await ctx.reply(message);
      
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!platformZskService['browser']) {
          await platformZskService.init();
        }
        
        const proxyStatus = await platformZskService.checkProxyStatus();
        
        let proxyMessage = `üîó –ü—Ä–æ–∫—Å–∏: ${config.proxy.server}\n`;
        if (proxyStatus.success) {
          proxyMessage += `‚úÖ ${proxyStatus.message}\n`;
          if (proxyStatus.ip) {
            proxyMessage += `üìç IP: ${proxyStatus.ip}\n`;
          }
          if (proxyStatus.country) {
            proxyMessage += `üåç –°—Ç—Ä–∞–Ω–∞: ${proxyStatus.country}`;
          }
        } else {
          proxyMessage += `‚ùå ${proxyStatus.message}`;
        }
        
        await ctx.reply(proxyMessage);
      } catch (error) {
        logger.error('Error checking proxy in status command:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } else {
      message += `\n\nüîó –ü—Ä–æ–∫—Å–∏: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω`;
      await ctx.reply(message);
    }
  } catch (error) {
    logger.error('Error in handleStatus:', error);
    await ctx.reply(MESSAGES.error);
  }
}
