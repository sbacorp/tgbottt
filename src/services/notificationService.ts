import { Bot } from 'grammy';
import { config } from '../utils/config';
import logger from '../utils/logger';

class NotificationService {
  private bot: Bot<any>;

  constructor(bot: Bot<any>) {
    this.bot = bot;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(userId: number, message: string): Promise<boolean> {
    try {
      await this.bot.api.sendMessage(userId, message, {
        parse_mode: 'Markdown'
      });
      
      logger.info(`Notification sent to user ${userId}`);
      return true;
    } catch (error) {
      logger.error(`Error sending notification to user ${userId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
   */
  async sendNotificationWithKeyboard(
    userId: number, 
    message: string, 
    keyboard: any
  ): Promise<boolean> {
    try {
      await this.bot.api.sendMessage(userId, message, {
        parse_mode: 'MarkdownV2',
        reply_markup: keyboard
      });
      
      logger.info(`Notification with keyboard sent to user ${userId}`);
      return true;
    } catch (error) {
      logger.error(`Error sending notification with keyboard to user ${userId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   */
  async sendAdminNotification(message: string): Promise<void> {
    try {
      for (const adminId of config.adminUserIds) {
        await this.sendNotification(adminId, `üîî *–ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:*\n\n${message}`);
      }
      
      logger.info(`Admin notification sent to ${config.adminUserIds.length} admins`);
    } catch (error) {
      logger.error('Error sending admin notification:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorNotification(error: string, context?: any): Promise<void> {
    const contextStr = context ? `\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${JSON.stringify(context, null, 2)}` : '';
    const message = `‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n${error}${contextStr}`;
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async sendMonitoringStatusNotification(status: string): Promise<void> {
    const message = `üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status}`;
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
   */
  async sendNewOrganizationsNotification(organizations: Array<{ inn: string; name: string }>): Promise<void> {
    if (organizations.length === 0) return;

    const message = `üÜï –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n${
      organizations.map(org => `‚Ä¢ ${org.inn} - ${org.name}`).join('\n')
    }`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendNotificationToAllUsers(message: string): Promise<void> {
    try {
      const { database } = await import('../database/index');
      const users = await database.getAllUsers();
      
      for (const user of users) {
        try {
          await this.sendNotification(user?.telegram_id || 0, message);
        } catch (error) {
          logger.error(`Error sending notification to user ${user.telegram_id}:`, error);
        }
      }
      
      logger.info(`Notification sent to ${users.length} users`);
    } catch (error) {
      logger.error('Error sending notification to all users:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
   */
  async sendRemovedOrganizationsNotification(organizations: Array<{ inn: string; name: string }>): Promise<void> {
    if (organizations.length === 0) return;

    const message = `üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n${
      organizations.map(org => `‚Ä¢ ${org.inn} - ${org.name}`).join('\n')
    }`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
   */
  async sendNewUsersNotification(users: Array<{ telegramId: number; username?: string }>): Promise<void> {
    if (users.length === 0) return;

    const message = `üë• –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n${
      users.map(user => `‚Ä¢ ${user.username || `ID: ${user.telegramId}`}`).join('\n')
    }`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async sendRemovedUsersNotification(users: Array<{ telegramId: number; username?: string }>): Promise<void> {
    if (users.length === 0) return;

    const message = `üë§ –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n${
      users.map(user => `‚Ä¢ ${user.username || `ID: ${user.telegramId}`}`).join('\n')
    }`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API
   */
  async sendApiErrorNotification(apiName: string, error: string): Promise<void> {
    const message = `üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å API ${apiName}:\n\n${error}`;
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ API
   */
  async sendApiRecoveryNotification(apiName: string): Promise<void> {
    const message = `‚úÖ API ${apiName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async sendStatisticsNotification(stats: {
    totalOrganizations: number;
    redOrganizations: number;
    orangeOrganizations: number;
    greenOrganizations: number;
    totalUsers: number;
    activeUsers: number;
  }): Promise<void> {
    const message = `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n` +
      `üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalOrganizations}\n` +
      `‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${stats.redOrganizations}\n` +
      `‚Ä¢ üü° –ñ–µ–ª—Ç—ã–π —Å–ø–∏—Å–æ–∫: ${stats.orangeOrganizations}\n` +
      `‚Ä¢ üü¢ –ó–µ–ª—ë–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${stats.greenOrganizations}\n\n` +
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}\n` +
      `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeUsers}`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
   */
  async sendRestartNotification(): Promise<void> {
    const message = `üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞`;
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
   */
  async sendMaintenanceNotification(duration: string, reason: string): Promise<void> {
    const message = `üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:\n\n` +
      `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}\n` +
      `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    
    await this.sendAdminNotification(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
   */
  async sendMaintenanceCompleteNotification(): Promise<void> {
    const message = `‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
    await this.sendAdminNotification(message);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  async checkBotHealth(): Promise<boolean> {
    try {
      const me = await this.bot.api.getMe();
      logger.info(`Bot health check passed: ${me.first_name} (@${me.username})`);
      return true;
    } catch (error) {
      logger.error('Bot health check failed:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo(): Promise<any> {
    try {
      return await this.bot.api.getMe();
    } catch (error) {
      logger.error('Error getting bot info:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export { NotificationService };

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
let notificationServiceInstance: NotificationService | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
export function initializeNotificationService(bot: Bot<any>): NotificationService {
  if (!notificationServiceInstance) {
    notificationServiceInstance = new NotificationService(bot);
  }
  return notificationServiceInstance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export function getNotificationService(): NotificationService {
  if (!notificationServiceInstance) {
    throw new Error('NotificationService not initialized. Call initializeNotificationService first.');
  }
  return notificationServiceInstance;
}
