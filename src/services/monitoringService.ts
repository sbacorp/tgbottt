import cron from 'node-cron';
import { database } from '../database/index';
import { FireCrawlService, KonturOrganizationData } from './firecrawlService';
import { getNotificationService } from './notificationService';
import logger from '../utils/logger';
import { config } from '../utils/config';
import { Organization } from '../types';

export class MonitoringService {
  private firecrawlService: FireCrawlService;
  private isRunning = false;

  constructor() {
    this.firecrawlService = new FireCrawlService();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
   */
  startMonitoring(): void {
    if (this.isRunning) {
      logger.warn('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 6 –º–∏–Ω—É—Ç
    cron.schedule('6 * * * *', async () => {
      await this.performMonitoring();
    }, {
      scheduled: true,
      timezone: 'Europe/Moscow'
    });

    this.isRunning = true;
    logger.info('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞.');
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
   */
  async performMonitoring(): Promise<void> {
    try {
      logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const organizations = await database.getAllOrganizations();
      
      if (organizations.length === 0) {
        logger.info('–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        return;
      }

      logger.info(`–ü—Ä–æ–≤–µ—Ä—è–µ–º ${organizations.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π`);

      // –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
      const inns = organizations.map((org: any) => org.inn);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ FireCrawl
      const results = await this.firecrawlService.checkMultipleOrganizations(inns);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const [inn, newData] of results) {
        await this.processOrganizationCheck(inn, newData);
      }

      logger.info('–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async processOrganizationCheck(inn: string, newData: KonturOrganizationData): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
      const currentOrg = await database.getOrganizationByInn(inn);
      
      if (!currentOrg) {
        logger.warn(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –ò–ù–ù ${inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      await database.addOrganizationCheck({
        inn,
        status: newData.status,
        details: {
          name: newData.name,
          address: newData.address,
          isLiquidated: newData.isLiquidated,
          illegalitySigns: newData.illegalitySigns,
          region: newData.region,
          additionalInfo: newData.additionalInfo,
          comment: newData.comment,
          liquidationDate: newData.liquidationDate,
          registrationDate: newData.registrationDate,
          ogrn: newData.ogrn,
          kpp: newData.kpp,
          okpo: newData.okpo,
          founders: newData.founders,
          activities: newData.activities,
          capital: newData.capital,
          taxAuthority: newData.taxAuthority
        }
      });

      // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
      const updateData: Partial<Organization> = {};
      
      if (newData.name) updateData.name = newData.name;
      if (newData.status) updateData.status = newData.status;
      if (newData.address) updateData.address = newData.address;
      if (newData.websites) updateData.websites = newData.websites;
      if (newData.isLiquidated !== undefined) updateData.isLiquidated = newData.isLiquidated;
      if (newData.illegalitySigns) updateData.illegalitySigns = newData.illegalitySigns;
      if (newData.region) updateData.region = newData.region;
      if (newData.additionalInfo) updateData.additionalInfo = newData.additionalInfo;
      if (newData.comment) updateData.comment = newData.comment;
      
      await database.updateOrganizationData(inn, updateData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
      if (currentOrg.status !== newData.status) {
        logger.info(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ò–ù–ù ${inn}: ${currentOrg.status} ‚Üí ${newData.status}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        const lastCheck = await database.getLastOrganizationCheck(inn);
        const shouldNotify = !lastCheck || !lastCheck.notified || lastCheck.status !== newData.status;

        if (shouldNotify) {
          await this.sendStatusChangeNotification(inn, newData);
          
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          await database.markCheckAsNotified(inn, newData.status);
        }
      } else {
        logger.info(`–î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${inn} –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: ${newData.status})`);
      }

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù ${inn}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  private async sendStatusChangeNotification(
    inn: string, 
    newData: KonturOrganizationData
  ): Promise<void> {
    try {
      const statusEmoji = config.STATUS_EMOJIS[newData.status as keyof typeof config.STATUS_EMOJIS];
      const statusMessage = config.STATUS_MESSAGE[newData.status as keyof typeof config.STATUS_MESSAGE];

      let message = `${statusEmoji} **–í–Ω–∏–º–∞–Ω–∏–µ! üö¶ –ó–°–ö:**\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
      if (newData.liquidationDate) {
        message += `üìÖ **–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫:** ${newData.liquidationDate}\n`;
      }
      
      if (newData.name) {
        message += `üè¢ **–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:** ${newData.name}\n`;
      }
      
      message += `üî¢ **–ò–ù–ù:** ${inn}\n`;
      
      if (newData.address) {
        message += `üìç **–ê–¥—Ä–µ—Å:** ${newData.address}\n`;
      }
      
      if (newData.websites && newData.websites.length > 0) {
        message += `üåê **–°–ø–∏—Å–æ–∫ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏:** ${newData.websites.join(', ')}\n`;
      }
      
      if (newData.isLiquidated !== undefined) {
        message += `‚ö†Ô∏è **–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** ${newData.isLiquidated ? '–î–∞' : '–ù–µ—Ç'}\n`;
      }
      
      if (newData.illegalitySigns && newData.illegalitySigns.length > 0) {
        message += `üö® **–°–∞–Ω–∫—Ü–∏–∏:** ${newData.illegalitySigns.join(', ')}\n`;
      }
      
      if (newData.region) {
        message += `üó∫ **–†–µ–≥–∏–æ–Ω:** ${newData.region}\n`;
      }
      
      if (newData.additionalInfo) {
        message += `üìã **–î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** ${newData.additionalInfo}\n`;
      }
      
      if (newData.comment) {
        message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${newData.comment}\n`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (newData.hasIllegalActivity !== undefined) {
        message += `üö® **–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** ${newData.hasIllegalActivity ? '–î–∞' : '–ù–µ—Ç'}\n`;
      }
      
      message += `\n${statusMessage}\n`;
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö –¥–ª—è –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      if (newData.status === 'orange' && newData.riskInfo) {
        message += `\n‚ö†Ô∏è **–†–∏—Å–∫–∏:**\n${newData.riskInfo}\n`;
      }


      message += '‚ûï –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ: ' + new Date().toLocaleDateString('ru-RU');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      await getNotificationService().sendNotificationToAllUsers(message);

      logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ò–ù–ù ${inn}`);

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ò–ù–ù ${inn}:`, error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async checkOrganization(inn: string): Promise<KonturOrganizationData | null> {
    try {
      logger.info(`–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –ò–ù–ù: ${inn}`);
      
      const data = await this.firecrawlService.getOrganizationData(inn);
      console.log(data, 'data')
      if (data) {
        
        
        logger.info(`–î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${inn} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }

      return data;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù ${inn}:`, error);
      return null;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring(): void {
    if (!this.isRunning) {
      logger.warn('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.isRunning = false;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  isMonitoringRunning(): boolean {
    return this.isRunning;
  }
}

export const monitoringService = new MonitoringService();
