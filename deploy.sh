#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ü–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
check_env_file() {
    if [ ! -f ".env" ]; then
        print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print_status "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:"
        echo "BOT_TOKEN=your_telegram_bot_token"
        echo "DATABASE_URL=postgresql://cbr_user:cbr_password@postgres:5432/cbr_bot"
        echo "FIRECRAWL_API_KEY=your_firecrawl_api_key"
        echo "CLAUDE_API_KEY=your_claude_api_key"
        echo "MONITORING_INTERVAL=2700000"
        echo "ADMIN_USER_IDS=1856156198,145328014"
        echo "LOG_LEVEL=info"
        exit 1
    fi
    print_success "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∏ Docker Compose
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    print_success "Docker –∏ Docker Compose –¥–æ—Å—Ç—É–ø–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_app() {
    print_status "–°–æ–±–∏—Ä–∞–µ–º TypeScript..."
    npm run build
    if [ $? -eq 0 ]; then
        print_success "TypeScript —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ TypeScript"
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    print_status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose down
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    print_status "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose build --no-cache
    docker-compose up -d
    
    if [ $? -eq 0 ]; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    if docker-compose ps postgres | grep -q "Up"; then
        print_success "PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if docker-compose ps cbr-bot | grep -q "Up"; then
        print_success "CBR Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "CBR Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    print_status "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫..."
    docker-compose logs --tail=50 cbr-bot
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
monitor_logs() {
    print_status "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    docker-compose logs -f cbr-bot
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    echo ""
    echo "ü§ñ CBR Monitoring Bot - –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è"
    echo "======================================"
    echo "1) üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –∑–∞–ø—É—Å–∫)"
    echo "2) üì¶ –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫"
    echo "3) ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "4) ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "5) üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "6) üìù –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "7) üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"
    echo "8) üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"
    echo "9) ‚ùå –í—ã—Ö–æ–¥"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é [1-9]: " choice
    
    case $choice in
        1)
            print_status "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π..."
            check_env_file
            check_docker
            build_app
            stop_containers
            start_containers
            check_containers
            show_logs
            ;;
        2)
            print_status "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫..."
            check_env_file
            check_docker
            build_app
            start_containers
            check_containers
            ;;
        3)
            stop_containers
            ;;
        4)
            print_status "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker-compose up -d
            check_containers
            ;;
        5)
            print_status "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker-compose ps
            ;;
        6)
            show_logs
            ;;
        7)
            monitor_logs
            ;;
        8)
            print_status "–û—á–∏—â–∞–µ–º –ª–æ–≥–∏..."
            > logs/error.log
            > logs/combined.log
            print_success "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
            ;;
        9)
            print_status "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            exit 0
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            main_menu
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [ $# -eq 0 ]; then
    main_menu
else
    case $1 in
        deploy)
            check_env_file
            check_docker
            build_app
            stop_containers
            start_containers
            check_containers
            show_logs
            ;;
        start)
            docker-compose up -d
            check_containers
            ;;
        stop)
            stop_containers
            ;;
        logs)
            show_logs
            ;;
        status)
            docker-compose ps
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [deploy|start|stop|logs|status]"
            echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            exit 1
            ;;
    esac
fi
